<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – Deadlock Handling</title>
    <link>/deadlock/deadlock-handling/</link>
    <description>Recent content in Deadlock Handling on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="/deadlock/deadlock-handling/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Deadlock Prevention</title>
      <link>/deadlock/deadlock-handling/deadlock-prevention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/deadlock/deadlock-handling/deadlock-prevention/</guid>
      <description>
        
        
        &lt;p&gt;Deadlock can be prevented by breaking one of the four necessary conditions:&lt;/p&gt;
&lt;h3&gt;1. Mutual Exclusion&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;1-mutual-exclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#1-mutual-exclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Condition&lt;/strong&gt;: Only one process at a time can hold a resource.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prevention&lt;/strong&gt;: Not needed for sharable resources (like read-only files).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Required&lt;/strong&gt; only for non-sharable resources (like printers, files for writing).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Hold and Wait&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;2-hold-and-wait&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#2-hold-and-wait&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Condition&lt;/strong&gt;: A process is holding at least one resource and waiting for others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prevention Strategy&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Force processes to request all resources at once&lt;/li&gt;
&lt;li&gt;OR allow them to request resources only when holding none&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;mermaid hx-mt-6&#34;&gt;
  graph TD
    Start[Start]
    RequestAll[Process requests all resources at once]
    Execute[If all available, process executes]
    Wait[If not, process waits and holds nothing]

    Start --&amp;gt; RequestAll --&amp;gt; Execute
    RequestAll --&amp;gt; Wait
&lt;/pre&gt;&lt;h3&gt;3. No Preemption&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;3-no-preemption&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-no-preemption&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Condition&lt;/strong&gt;: Resources cannot be forcibly taken&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prevention Strategy&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a process holding resources requests another unavailable resource, all held resources are released&lt;/li&gt;
&lt;li&gt;The process is suspended until all needed resources (old + new) are available again&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;mermaid hx-mt-6&#34;&gt;
  flowchart TD
    A[&amp;#34;Process holding R1&amp;#34;]
    B[&amp;#34;Requests R2 (unavailable)&amp;#34;]
    C[&amp;#34;Release R1&amp;#34;]
    D[&amp;#34;Wait for R1 and R2&amp;#34;]
    E[&amp;#34;Re-acquire R1 and R2&amp;#34;]
    F[&amp;#34;Resume Execution&amp;#34;]

    A --&amp;gt; B --&amp;gt; C --&amp;gt; D --&amp;gt; E --&amp;gt; F
&lt;/pre&gt;&lt;h3&gt;4. Circular Wait&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;4-circular-wait&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#4-circular-wait&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Condition&lt;/strong&gt;: A circular chain of waiting processes exists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prevention Strategy&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Impose a &lt;strong&gt;total ordering&lt;/strong&gt; on all resources.&lt;/li&gt;
&lt;li&gt;Processes must request resources in &lt;strong&gt;ascending order&lt;/strong&gt; only.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let: R0 &amp;lt; R1 &amp;lt; R2 &amp;lt; R3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Allowed:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;P1 requests R0 → R1 → R3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Disallowed:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;P2 holds R3, requests R0 (violates ascending order)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Visual Representation:&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;visual-representation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#visual-representation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;pre class=&#34;mermaid hx-mt-6&#34;&gt;
  graph TD
    R0((R0))
    R1((R1))
    R2((R2))
    R3((R3))

    P1((P1)) --&amp;gt; R0
    R0 --&amp;gt; P1
    P1 --&amp;gt; R1
    R1 --&amp;gt; P1
    P1 --&amp;gt; R3
    R3 --&amp;gt; P1
&lt;/pre&gt;&lt;p&gt;If all processes follow this order, circular wait &lt;strong&gt;cannot occur&lt;/strong&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Deadlock Avoidance</title>
      <link>/deadlock/deadlock-handling/deadlock-avoidance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/deadlock/deadlock-handling/deadlock-avoidance/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Deadlock Detection</title>
      <link>/deadlock/deadlock-handling/deadlock-detection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/deadlock/deadlock-handling/deadlock-detection/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Deadlock Recovery</title>
      <link>/deadlock/deadlock-handling/deadlock-recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/deadlock/deadlock-handling/deadlock-recovery/</guid>
      <description>
        
        
        
      </description>
    </item>
    
  </channel>
</rss>
