{"/exec-family/":{"data":{"":"","exec-family#Exec Family":"Exec Family execl() int execl(const char *path, const char *arg, ...); Return Value:\nSuccess: No return Error: -1 execlp() int execlp(const char *file, const char *arg, ...); Return Value:\nSuccess: No return Error: -1 execle() int execle(const char *path, const char *arg, ..., char * const envp[]); Return Value:\nSuccess: No return Error: -1 execv() int execv(const char *path, char *const argv[]); Return Value:\nSuccess: No return Error: -1 execvp() int execvp(const char *file, char *const argv[]); Return Value:\nSuccess: No return Error: -1 execvpe() int execvpe(const char *file, char *const argv[], char *const envp[]); Return Value:\nSuccess: No return Error: -1 "},"title":"Exec Family"},"/file-operations/":{"data":{"":"","file-operations#File Operations":"File Operations open() int open(const char *pathname, int flags, mode_t mode); Return Value:\nSuccess: File descriptor Error: -1 read() ssize_t read(int fd, void *buf, size_t count); Return Value:\nSuccess: Number of bytes read Error: -1 write() ssize_t write(int fd, const void *buf, size_t count); Return Value:\nSuccess: Number of bytes written Error: -1 close() int close(int fd); Return Value:\nSuccess: 0 Error: -1 dup() int dup(int oldfd); Return Value:\nSuccess: New file descriptor Error: -1 dup2() int dup2(int oldfd, int newfd); Return Value:\nSuccess: New file descriptor Error: -1 "},"title":"File Operations"},"/pipes--fifos/":{"data":{"":"","pipes--fifos#Pipes \u0026amp; FIFOs":"Pipes \u0026 FIFOs pipe() int pipe(int pipefd[2]); Return Value:\nSuccess: 0 Error: -1 mkfifo() int mkfifo(const char *pathname, mode_t mode); Return Value:\nSuccess: 0 Error: -1 "},"title":"Pipes \u0026 FIFOs"},"/process-control/":{"data":{"":"","_exit#_exit()":"","exit#exit()":"","fork#fork()":"","getpid#getpid()":"","macros#MACROS":"fork() pid_t fork(void); Return Value:\nParent: childâ€™s PID (positive) Child: 0 Error: -1 wait() pid_t wait(int *status); Return Value:\nSuccess: PID of terminated child Error: -1 waitpid() pid_t waitpid(pid_t pid, int *status, int options); Return Value:\nSuccess: PID of child Error: -1 With WNOHANG and no children ready: 0 exit() void exit(int status); Return Value:\nDoes not return _exit() void _exit(int status); Return Value:\nDoes not return getpid() pid_t getpid(void); Return Value:\nProcess ID of calling process MACROS ","wait#wait()":"","waitpid#waitpid()":"","wexitstatus#WEXITSTATUS":" WEXITSTATUS(status) Return Value:\nReturn code when WIFEXITED is true ","wifexited#WIFEXITED":" WIFEXITED(status) Return Value:\nTrue if child terminated normally ","wifsignaled#WIFSIGNALED":" WIFSIGNALED(status) Return Value:\nTrue if child terminated by signal ","wifstopped#WIFSTOPPED":" WIFSTOPPED(status) Return Value:\nTrue if child is stopped ","wstopsig#WSTOPSIG":" WSTOPSIG(status) Return Value:\nSignal number when WIFSTOPPED is true ","wtermsig#WTERMSIG":" WTERMSIG(status) Return Value:\nSignal number when WIFSIGNALED is true "},"title":"Process Control"},"/semaphores/":{"data":{"":"","semaphores#Semaphores":"Semaphores sem_open() sem_t *sem_open(const char *name, int oflag, mode_t mode, unsigned int value); Return Value:\nSuccess: Pointer to semaphore Error: SEM_FAILED sem_close() int sem_close(sem_t *sem); Return Value:\nSuccess: 0 Error: -1 sem_unlink() int sem_unlink(const char *name); Return Value:\nSuccess: 0 Error: -1 sem_wait() int sem_wait(sem_t *sem); Return Value:\nSuccess: 0 Error: -1 sem_trywait() int sem_trywait(sem_t *sem); Return Value:\nSuccess: 0 Error: -1 sem_post() int sem_post(sem_t *sem); Return Value:\nSuccess: 0 Error: -1 sem_getvalue() int sem_getvalue(sem_t *sem, int *sval); Return Value:\nSuccess: 0 Error: -1 sem_init() int sem_init(sem_t *sem, int pshared, unsigned int value); Return Value:\nSuccess: 0 Error: -1 sem_destroy() int sem_destroy(sem_t *sem); Return Value:\nSuccess: 0 Error: -1 "},"title":"Semaphores"},"/shared-memory/":{"data":{"":"","memory-mapping#Memory Mapping":"mmap() void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset); Return Value:\nSuccess: Pointer to mapped area Error: MAP_FAILED munmap() int munmap(void *addr, size_t length); Return Value:\nSuccess: 0 Error: -1 ","shared-memory#Shared Memory":"Shared Memory shmget() int shmget(key_t key, size_t size, int shmflg); Return Value:\nSuccess: Shared memory segment ID Error: -1 shmat() void *shmat(int shmid, const void *shmaddr, int shmflg); Return Value:\nSuccess: Pointer to shared memory segment Error: -1 shmdt() int shmdt(const void *shmaddr); Return Value:\nSuccess: 0 Error: -1 shmctl() int shmctl(int shmid, int cmd, struct shmid_ds *buf); Return Value:\nSuccess: 0 Error: -1 semget() int semget(key_t key, int nsems, int semflg); Return Value:\nSuccess: Semaphore set ID Error: -1 semop() int semop(int semid, struct sembuf *sops, size_t nsops); Return Value:\nSuccess: 0 Error: -1 "},"title":"Shared Memory"},"/threading/":{"data":{"":"","#":"pthread_create() ","threading#Threading":" int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg); Return Value:\nSuccess: 0 Error: Error number pthread_join() int pthread_join(pthread_t thread, void **retval); Return Value:\nSuccess: 0 Error: Error number pthread_detach() int pthread_detach(pthread_t thread); Return Value:\nSuccess: 0 Error: Error number pthread_exit() void pthread_exit(void *retval); Return Value:\nDoes not return pthread_self() pthread_t pthread_self(void); Return Value:\nThe ID of the calling thread pthread_cond_init() int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr); Return Value:\nSuccess: 0 Error: Error number pthread_cond_destroy() int pthread_cond_destroy(pthread_cond_t *cond); Return Value:\nSuccess: 0 Error: Error number pthread_cond_wait() int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex); Return Value:\nSuccess: 0 Error: Error number "},"title":"Threading"}}